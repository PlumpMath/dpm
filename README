dpm - Debian package manager
----------------------------

I've got some crazy ideas about a unified apt+dpkg implementation, and
this is the place where early experimentation happens.  I do this
mostly to write some real code again, not really with the hope of
replacing dpkg and apt.

This is not about the Debian package or archive formats, it's just
about the implementation and user interfaces of dpkg and apt.  It's
maybe also a bit about algorithms to compute a package management
operation.

Initially, dpm will be compatible with the dpkg data base in
/var/lib/dpkg (if it ever gets as far as actually installing
packages), but only as a crutch: dpm will notice changes in
/var/lib/dpkg and will keep it up-to-date, but it will not rely on it.

* Steps

- A nice, fast storage for structured data, similar to apt's caches.
  It will not be a cache, but the primary storage.  It will be binary,
  with tools to export/import plain text.  Mutations of existing data
  are not allowed.  Modifications will be journalled, with the
  occasional garbage collection.

  That store will be used to store package info about available and
  installed packages and the file lists of installed packages.

  The data structure in the store should be able to deal with a
  complete archive: multiple distributions and multiple architectures.
  It should be useable not only for managing a Debian installation but
  also for tools that rummage around in a Debian archive in general.
  Thus, it needs to be efficient.

  The store should be extensible so that tools can store their own
  private information efficiently.  But it's not a general purpose
  data base.

  The store will of course store the current situation, but it might
  also store a 'planned future', similar to apt's in-core depcache.

  In libdpm, store.h

- A nice simple library for parsing the file formats commonly
  encountered with Debian packages.

  Particularily files like /var/lib/dpkg/status and .deb archives, of
  course.

  In libdpm, dpm.h

- Importing the existing apt and dpkg state into a store.

  This includes defining the data structure of the store.  For
  starters, there will be one "status" record per package, which
  points to a number of "version" records.

  The status record contains the status, like not-installed,
  half-installed, installed, etc; a list of installed files, a list of
  conffiles, the installed version, the list of available versions,
  etc.

  A version record contains information about a single deb file,
  either from the deb itself or from a repository.  Debs are
  ultimately identified by their checksum, but only one deb for each
  given version is kept in the store.

  The version record can store any key/value pair that is found in a
  control file.  Some of them are handled specially and are found in
  fixed locations and are preparsed.  Dependencies of course, and
  debtags.
